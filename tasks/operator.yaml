# Initialize rook operator

- name: ROOK - Deploy Rook Operator
  k8s:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    state: present
    definition: "{{ item }}"
  register: result
  until: result.failed == 0 or (result.rc is defined and result.rc !=0) or (result.status is defined and result.status != 200)
  retries: "{{ k8s_task_retries | default(3) }}"
  delay: "{{ k8s_task_delay | default(15) }}"
  loop: "{{ lookup('template', 'operator.yaml.j2') | from_yaml_all | list }}"

# Verify the deployment is completed

- name: ROOK - Verify if the rook operator is up and running
  k8s:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    api_version: apps/v1beta1
    kind: Deployment
    name: rook-ceph-operator
    namespace: "{{ rook_operator_namespace }}"
  register: deployment_data
  until: deployment_data.result.status.conditions[0].status == "True"
  retries: "{{ k8s_task_retries | default(3) }}"
  delay: "{{ k8s_task_delay | default(15) }}"

- name: ROOK - Verify if the agents are running
  k8s:
    kubeconfig: "{{ kubeconfig_file_path | default(omit) }}"
    api_version: extensions/v1beta1
    kind: DaemonSet
    name: rook-ceph-agent
    namespace: "{{ rook_operator_namespace }}"
  register: daemonset_data
  until: daemonset_data.failed == 0 or (daemonset_data.rc is defined and daemonset_data.rc !=0) or daemonset_data.status != 200 or (daemonset_data.result is defined and daemonset_data.result.status.desiredNumberScheduled == daemonset_data.result.status.numberReady)
  retries: "{{ k8s_task_retries | default(3) }}"
  delay: "{{ k8s_task_delay | default(15) }}"
